<!DOCTYPE html><html lang="en-US"><head ><meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link media="all" href="https://cdn.javascripttutorial.net/wp-content/cache/autoptimize/css/autoptimize_4b6c23c49276886eaa08de07eb9dc8e2.css" rel="stylesheet" /><title>A Comprehensive Look at ES6 Modules</title><meta name="description" content="In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module." /><meta name="robots" content="index, follow" /><meta name="googlebot" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" /><meta name="bingbot" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" /><link rel="canonical" href="https://www.javascripttutorial.net/es6/es6-modules/" /><meta property="og:locale" content="en_US" /><meta property="og:type" content="article" /><meta property="og:title" content="A Comprehensive Look at ES6 Modules" /><meta property="og:description" content="In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module." /><meta property="og:url" content="https://www.javascripttutorial.net/es6/es6-modules/" /><meta property="og:site_name" content="JavaScript Tutorial" /><meta property="article:modified_time" content="2020-04-27T09:08:56+00:00" /><meta property="og:image" content="https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png" /><meta name="twitter:card" content="summary" /> <script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://www.javascripttutorial.net/#website","url":"https://www.javascripttutorial.net/","name":"JavaScript Tutorial","description":"A comprehensive JavaScript Tutorial","potentialAction":[{"@type":"SearchAction","target":"https://www.javascripttutorial.net/?s={search_term_string}","query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https://www.javascripttutorial.net/es6/es6-modules/#primaryimage","inLanguage":"en-US","url":"https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png","width":310,"height":128,"caption":"es6 module"},{"@type":"WebPage","@id":"https://www.javascripttutorial.net/es6/es6-modules/#webpage","url":"https://www.javascripttutorial.net/es6/es6-modules/","name":"A Comprehensive Look at ES6 Modules","isPartOf":{"@id":"https://www.javascripttutorial.net/#website"},"primaryImageOfPage":{"@id":"https://www.javascripttutorial.net/es6/es6-modules/#primaryimage"},"datePublished":"2016-12-01T09:57:33+00:00","dateModified":"2020-04-27T09:08:56+00:00","description":"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.","inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://www.javascripttutorial.net/es6/es6-modules/"]}]}]}</script> <link rel='dns-prefetch' href='//ajax.googleapis.com' /><link rel="alternate" type="application/rss+xml" title="JavaScript Tutorial &raquo; Feed" href="https://www.javascripttutorial.net/feed/" /><link rel="alternate" type="application/rss+xml" title="JavaScript Tutorial &raquo; Comments Feed" href="https://www.javascripttutorial.net/comments/feed/" /> <script type='text/javascript' defer src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js'></script> <link rel='https://api.w.org/' href='https://www.javascripttutorial.net/wp-json/' /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.javascripttutorial.net/xmlrpc.php?rsd" /><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://cdn.javascripttutorial.net/wp-includes/wlwmanifest.xml" /><meta name="generator" content="WordPress 5.4.2" /><link rel='shortlink' href='https://www.javascripttutorial.net/?p=1007' /><link rel="alternate" type="application/json+oembed" href="https://www.javascripttutorial.net/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.javascripttutorial.net%2Fes6%2Fes6-modules%2F" /><link rel="alternate" type="text/xml+oembed" href="https://www.javascripttutorial.net/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.javascripttutorial.net%2Fes6%2Fes6-modules%2F&#038;format=xml" /><link rel="pingback" href="https://www.javascripttutorial.net/xmlrpc.php" /> <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-64856799-4', 'auto');
  ga('send', 'pageview');</script> <link rel="icon" href="https://cdn.javascripttutorial.net/wp-content/uploads/2020/02/favicon-150x150.png" sizes="32x32" /><link rel="icon" href="https://cdn.javascripttutorial.net/wp-content/uploads/2020/02/favicon-300x300.png" sizes="192x192" /><link rel="apple-touch-icon" href="https://cdn.javascripttutorial.net/wp-content/uploads/2020/02/favicon-300x300.png" /><meta name="msapplication-TileImage" content="https://cdn.javascripttutorial.net/wp-content/uploads/2020/02/favicon-300x300.png" /></head><body class="page-template-default page page-id-1007 page-child parent-pageid-382 custom-header header-image header-full-width content-sidebar genesis-breadcrumbs-visible genesis-footer-widgets-visible eleven40-pro-blue"><a href="javascript:void(0)" class="to-top" title="Back To Top"><i class="icon-angle-up"></i></a><div class="site-container"><header class="site-header"><div class="wrap"><div class="title-area"><p class="site-title"><a href="https://www.javascripttutorial.net/">JavaScript Tutorial</a></p></div><nav class="nav-primary" aria-label="Main"><div class="wrap"><ul id="menu-top-menu" class="menu genesis-nav-menu menu-primary"><li id="menu-item-48" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-48"><a title="JavaScript Tutorial" href="https://www.javascripttutorial.net/"><span >Home</span></a></li><li id="menu-item-386" class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor menu-item-386"><a title="ES6 Tutorial" href="https://www.javascripttutorial.net/es6/"><span >ES6</span></a></li><li id="menu-item-979" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-979"><a title="Latest JavaScript Features" href="https://www.javascripttutorial.net/es-next/"><span >ES.Next</span></a></li><li id="menu-item-85213" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85213"><a title="JavaScript BOM" href="https://www.javascripttutorial.net/javascript-bom/"><span >JS BOM</span></a></li><li id="menu-item-85214" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85214"><a title="JavaScript DOM" href="https://www.javascripttutorial.net/javascript-dom/"><span >JS DOM</span></a></li><li id="menu-item-86319" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-86319"><a title="JavaScript Snippets" href="https://www.javascripttutorial.net/snippets/"><span >Snippets</span></a></li></ul></div></nav></div></header><div class="site-inner"><div class="wrap"><div class="content-sidebar-wrap"><main class="content"><div class="breadcrumb"><span class="breadcrumb-link-wrap"><a class="breadcrumb-link" href="https://www.javascripttutorial.net/"><span class="breadcrumb-link-text-wrap">Home</span></a><meta ></span> / <span class="breadcrumb-link-wrap"><a class="breadcrumb-link" href="https://www.javascripttutorial.net/es6/"><span class="breadcrumb-link-text-wrap">ES6 Tutorial</span></a><meta ></span> / A Comprehensive Look at ES6 Modules</div><article class="post-1007 page type-page status-publish entry"><header class="entry-header"><h1 class="entry-title">A Comprehensive Look at ES6 Modules</h1><div class="ad"><div data-type="ad" data-publisher="javascripttutorial.net" data-format="300x250" data-zone="content_top"></div></div></header><div class="entry-content"><p><strong>Summary</strong>: in this tutorial, you will learn about <strong>ES6 modules</strong> and how to export variables, functions, classes from a module, and reuse them in other modules.</p><p>An ES6 module is a JavaScript file that executes in strict mode only. It means that any <a href="http://www.javascripttutorial.net/es6/javascript-let/">variables</a> or <a href="http://www.javascripttutorial.net/javascript-function/">functions</a>&nbsp;declared in the module won&#8217;t be added automatically to the global scope.</p><h2>Executing modules on web browsers</h2><p>First, create a new file called <code>message.js</code> and add the following code:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> message = <span class="hljs-string">'ES6 Modules'</span>;</code></div></pre><p>The <code>message.js</code> is a module in ES6 that contains the <code>message</code> variable. The <code>export</code> statement exposes the <code>message</code> variable to other modules.</p><p>Second, create another new file named <code>app.js</code> that uses the <code>message.js</code> module. The <code>app.js</code> module creates a new heading 1 (h1) element and attaches it to an HTML page. The <code>import</code> statement imports the <code>message</code> variable from the <code>message.js</code> module.</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { message } <span class="hljs-keyword">from</span> <span class="hljs-string">'./message.js'</span>

<span class="hljs-keyword">const</span> h1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'h1'</span>);
h1.textContent = message

<span class="hljs-built_in">document</span>.body.appendChild(h1)</code></div></pre><p>Third, create a new HTML page that uses the <code>app.js</code> module:</p><pre class="wp-block-code"><div><code class="hljs language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ES6 Modules<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./app.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></div></pre><p>Note that we used the <code>type="module"</code> in the script tag to load the <code>app.js</code> module. If you view the page on a web browser, you will see the following page:</p><figure class="wp-block-image"><noscript><img src="https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png" alt="es6 module" class="wp-image-84747" srcset="https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png 310w, https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module-300x124.png 300w" sizes="(max-width: 310px) 100vw, 310px" /></noscript><img src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20210%20140%22%3E%3C/svg%3E' data-src="https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png" alt="es6 module" class="lazyload wp-image-84747" data-srcset="https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module.png 310w, https://cdn.javascripttutorial.net/wp-content/uploads/2019/12/es6-module-300x124.png 300w" data-sizes="(max-width: 310px) 100vw, 310px" /></figure><p>Let&#8217;s examine the export and import statements in more detail.</p><h2>Exporting</h2><p>To export a <a href="https://www.javascripttutorial.net/javascript-variables/">variable</a>, a <a href="https://www.javascripttutorial.net/javascript-function/">function</a>, or a <a href="http://www.javascripttutorial.net/es6/javascript-class/">class</a>, you place the <code>export</code> keyword in front of it as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// log.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> message = <span class="hljs-string">'Hi'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMessage</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> message;
}

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMessage</span>(<span class="hljs-params">msg</span>) </span>{
  message = msg;
}

<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>{
}
</code></div></pre><p>In this example, we have the <code>log.js</code> module with a variable, two functions, and one class. We used the <code>export</code> keyword to exports all identifiers in the module.</p><p>Note that the <code>export</code> keyword requires the function or class to have a name to be exported. You can&#8217;t export an anonymous function or class using this syntax.</p><p>JavaScript allows you to define a variable, a function, or a class first then export it later as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// foo.js</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{
   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo'</span>);
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar'</span>);
}
<span class="hljs-keyword">export</span> foo;
</code></div></pre><p>In this example, we defined the <code>foo()</code> function first and then exported it. Since we didn&#8217;t export the <code>bar()</code> function, we couldn&#8217;t access it in other modules. The <code>bar()</code> function is inaccessible outside the module or we say it is private.</p><h2>Importing</h2><p>Once you define a module with exports, you can access the exported variables, functions, and classes in another module by using the <code>import</code> keyword. The following illustrates the syntax:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { what, ever } <span class="hljs-keyword">from</span> <span class="hljs-string">'./other_module.js'</span>;</code></div></pre><p>In this syntax:</p><ul><li>First, specify what to import inside the curly braces, which are called bindings.</li><li>Then, specify the module from which you import the given bindings.</li></ul><p class="note">Note that when you import a binding from a module, the binding behaves like it was defined using <a href="http://www.javascripttutorial.net/es6/javascript-const/">const</a>. It means you can&#8217;t have another identifier with the same name or change the value of the binding.</p><p>See the following example:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// greeting.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> message = <span class="hljs-string">'Hi'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMessage</span>(<span class="hljs-params">msg</span>) </span>{
  message = msg;
}
</code></div></pre><p>When you import the <code>message</code> variable and <code>setMessage()</code> function, you can use the <code>setMessage()</code> function to change the value of the <code>message</code> variable as shown below:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// app.js</span>
<span class="hljs-keyword">import</span> {message, setMessage } <span class="hljs-keyword">from</span> <span class="hljs-string">'./greeting.js'</span>;
<span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// 'Hi'</span>

setMessage(<span class="hljs-string">'Hello'</span>);
<span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// 'Hello' </span>
</code></div></pre><p>However, you can&#8217;t change the value of the <code>message</code> variable directly. The following expression causes an error:</p><pre class="wp-block-code"><div><code class="hljs language-javascript">message = <span class="hljs-string">'Hallo'</span>; <span class="hljs-comment">// error</span>
</code></div></pre><p>Behind the scenes, when you called the <code>setMessage()</code> function. JavaScript went back to the <code>greeting.js</code> module and executed code in there and changed the <code>message</code> variable. The change was then automatically reflected on the imported <code>message</code> binding.</p><p>The <code>message</code> binding in the <code>app.js</code> is the local name for exported <code>message</code> identifier. So basically the <code>message</code>&nbsp;variables in the <code>app.js</code> and <code>greeting.js</code> modules aren&#8217;t the same.</p><h3>Import a single binding</h3><p>Suppose you have a module with the <code>foo</code> variable as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// foo.js</span>
<span class="hljs-keyword">export</span> foo = <span class="hljs-number">10</span>;
</code></div></pre><p>Then, in another module, you can reuse the <code>foo</code> variable:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// app.js</span>
<span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">'./foo.js'</span>;
<span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// 10;</span>
</code></div></pre><p>However, you can&#8217;t change the value of <code>foo</code>. If you attempt to do so, you will get an error:</p><pre class="wp-block-code"><div><code class="hljs language-javascript">foo = <span class="hljs-number">20</span>; <span class="hljs-comment">// throws an error</span>
</code></div></pre><h3>Import multiple bindings</h3><p>Suppose you have the <code>cal.js</code> module as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// cal.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>,
           b = <span class="hljs-number">20</span>,
           result = <span class="hljs-number">0</span>;

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>{
  result = a + b;
  <span class="hljs-keyword">return</span> result;
}

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span>(<span class="hljs-params"></span>) </span>{
  result = a * b;
  <span class="hljs-keyword">return</span> result;
}
</code></div></pre><p>And you want to import these bindings from the <code>cal.js</code>, you can explicitly list them as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> {a, b, result, sum, multiply } <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
sum();
<span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 30</span>

multiply();
<span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 200</span>
</code></div></pre><h3>Import an entire module as an object</h3><p>To import everything from a module as a single object, you&nbsp;use the asterisk (*) pattern as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cal <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
</code></div></pre><p>In this example, we imported all bindings from the <code>cal.js</code> module as the <code>cal</code> object. In this case, all the bindings become properties of the <code>cal</code> object, so you can access them as shown below:</p><pre class="wp-block-code"><div><code class="hljs language-css"><span class="hljs-selector-tag">cal</span><span class="hljs-selector-class">.a</span>;
<span class="hljs-selector-tag">cal</span><span class="hljs-selector-class">.b</span>;
<span class="hljs-selector-tag">cal</span><span class="hljs-selector-class">.sum</span>();</code></div></pre><p>This import is called <em>namespace import</em>.</p><p>It&#8217;s important to keep in mind that the imported module executes <em>only once</em> even import it multiple times. Consider this example:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { a } <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
<span class="hljs-keyword">import</span> { b } <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
<span class="hljs-keyword">import</span> {result} <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
</code></div></pre><p>After the first <code>import</code> statement, the <code>cal.js</code> module is executed and loaded into the memory, and it is reused whenever it is referenced by the subsequent&nbsp;<code>import</code> statement.</p><h2>Limitation of <code>import</code> and <code>export</code> statements</h2><p>Note that you must use the <code>import</code> or <code>export</code> statement <em>outside</em> other statements and functions. The following example causes a <code>SyntaxError</code>:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">if</span>( requiredSum ) {
   <span class="hljs-keyword">export</span> sum;
}  
</code></div></pre><p>Because we used the <code>export</code> statement inside the <code><a href="https://www.javascripttutorial.net/javascript-if-else/">if</a></code> statement. Similarly, the following <code>import</code> statement also causes a <code>SyntaxError</code>:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">importSum</span>(<span class="hljs-params"></span>) </span>{
   <span class="hljs-keyword">import</span> {sum} <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
}
</code></div></pre><p>Because we used the <code>import</code> statement inside a function.</p><p>The reason for the error is that JavaScript must <em>statically</em> determine what will be exported and imported.</p><p class="note">Note that ES2020 introduced the function-like object <a href="https://www.javascripttutorial.net/es-next/javascript-import/">import()</a> that allows you to dynamically import a module.</p><h2>Aliasing</h2><p>JavaScript allows you to create aliases for variables, functions, or classes when you export and import. See the following <code>math.js</code> module:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// math.js  </span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"> a, b </span>) </span>{
   <span class="hljs-keyword">return</span> a + b;
}

<span class="hljs-keyword">export</span> { add <span class="hljs-keyword">as</span> sum };
</code></div></pre><p>In this example, instead of exporting the <code>add()</code> function, we used the <code>as</code> keyword to assign the <code>sum()</code> function an alias.</p><p>So when you import the <code>add()</code> function from the <code>math.js</code> module, you must use <code>sum</code> instead:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { sum } <span class="hljs-keyword">from</span> <span class="hljs-string">'./math.js'</span>;
</code></div></pre><p>If you want to use a different name when you import, you can use the <code>as</code> keyword as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> {sum <span class="hljs-keyword">as</span> total} <span class="hljs-keyword">from</span> <span class="hljs-string">'./math.js'</span>;
</code></div></pre><h2>Re-exporting a binding</h2><p>It&#8217;s possible to export bindings that you have imported. This is called re-exporting. For example:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { sum } <span class="hljs-keyword">from</span> <span class="hljs-string">'./math.js'</span>;
<span class="hljs-keyword">export</span> { sum };
</code></div></pre><p>In this example, we imported <code>sum</code> from the <code>math.js</code> module and re-export it. The following statement is equivalent to the statements above:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">export</span> {sum} <span class="hljs-keyword">from</span> <span class="hljs-string">'./math.js'</span>;</code></div></pre><p>In case you want to rename the bindings before re-exporting, you use the <code>as</code> keyword. The following example imports <code>sum</code> from the <code>math.js</code> module and re-export it as <code>add</code>.</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">export</span> { sum <span class="hljs-keyword">as</span> add } <span class="hljs-keyword">from</span> <span class="hljs-string">'./math.js'</span>;
</code></div></pre><p>If you want to export all the bindings from another module, you can use the asterisk (*):</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">'./cal.js'</span>;
</code></div></pre><h2>Importing without bindings</h2><p>Sometimes, you want to develop a module that doesn&#8217;t export anything, for example, you may want to add a new method to a built-in object such as the <a href="http://www.javascripttutorial.net/javascript-array/">Array</a>.</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// array.js</span>
<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.prototype.contain) {
  <span class="hljs-built_in">Array</span>.prototype.contain = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>{
    <span class="hljs-comment">// contain implementation</span>
    <span class="hljs-comment">// ...</span>
  }
}</code></div></pre><p>Now, you can import the module without any binding and use the <code>contain()</code> method defined in the <code>array.js</code> module as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">'./array.js'</span>;
[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].contain(<span class="hljs-number">2</span>); <span class="hljs-comment">// true</span>
</code></div></pre><h2>Default exports</h2><p>A module can have one and only one default export. The default export is easier to import. The default for a module can be a variable, a function, or a class.</p><p>The following is the <code>sort.js</code> module with a default export.</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// sort.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arr</span>) </span>{
  <span class="hljs-comment">// sorting here</span>
} 
</code></div></pre><p>Note that you don&#8217;t need to specify the name for the function because the module represents the function name.</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> sort <span class="hljs-keyword">from</span> sort.js;
sort([<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]);
</code></div></pre><p>As you see, the &nbsp;<code>sort</code> identifier represents the default function of the <code>sort.js</code> module. Notice that we didn&#8217;t use the curly brace <code>{}</code> surrounding the &nbsp;<code>sort</code> identifier.</p><p>Let&#8217;s change the <code>sort.js</code> module to include the default export as well as the non-default one:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-comment">// sort.js</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arr</span>) </span>{
  <span class="hljs-comment">// sorting here</span>
}
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapSort</span>(<span class="hljs-params">arr</span>) </span>{
  <span class="hljs-comment">// heapsort</span>
}
</code></div></pre><p>To import both default and non-default bindings, you use the specify a list of bindings after the <code>import</code> keyword with the following rules:</p><ul><li>The default binding must come first.</li><li>The non-default binding must be surrounded by curly braces.</li></ul><p>See the following example:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> sort, {heapSort} <span class="hljs-keyword">from</span> <span class="hljs-string">'./sort.js'</span>;
sort([<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]);
heapSort([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]);
</code></div></pre><p>To rename the default export, you also use the <code>as</code> keyword as follows:</p><pre class="wp-block-code"><div><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> quicksort, heapSort} <span class="hljs-keyword">from</span> <span class="hljs-string">'./sort.js'</span>;
</code></div></pre><p>In this tutorial, you have learned about ES6 modules and how to export bindings from a module and import them into another module.</p><div class="helpful-block-content wth-theme-thumbs" data-title="" ><ul><li><span class="wth-title">Was this tutorial helpful ?</span></li><li><a data-post="1007" data-post-url="https://www.javascripttutorial.net/es6/es6-modules/" data-post-title="A Comprehensive Look at ES6 Modules" data-response="1" href="#" class="wth-green-btn icon-thumbsup icon1-thumbs-up4">Yes</a><a data-response="0" data-post="1007" data-post-url="https://www.javascripttutorial.net/es6/es6-modules/" data-post-title="A Comprehensive Look at ES6 Modules" href="#" class="wth-red-btn icon-thumbsdown icon1-thumbs-down4">No</a></li></ul></div></div><div class="ad"><div data-type="ad" data-publisher="javascripttutorial.net" data-format="300x250" data-zone="content_bottom"></div></div><div class="page-navigation"><div class="page-previous"><a class="prev-page-anchor" href="https://www.javascripttutorial.net/es6/javascript-object-destructuring/" rel="prev" title="JavaScript Object Destructuring"><span>Previous</span> JavaScript Object Destructuring</a></div><div class="page-next"><a class="next-page-anchor" href="https://www.javascripttutorial.net/es6/javascript-class/" rel="next" title="JavaScript Class Fundamentals"><span>Next</span> JavaScript Class Fundamentals</a></div></div></article></main><aside class="sidebar sidebar-primary widget-area" role="complementary" aria-label="Primary Sidebar"><section id="search-4" class="widget widget_search"><div class="widget-wrap"><form class="search-form" method="get" action="https://www.javascripttutorial.net/" role="search"><input class="search-form-input" type="search" name="s" id="searchform-1" placeholder="Search this website"><input class="search-form-submit" type="submit" value="Search"><meta content="https://www.javascripttutorial.net/?s={s}"></form></div></section><section id="textblockswidget-2" class="widget widget_textblockswidget"><div class="widget-wrap"><div class="text-block sidebar-top"><div class="ad"><div data-type="ad" data-publisher="javascripttutorial.net" data-format="300x250" data-zone="sidebar_top"></div></div><div id="carbon-block"></div> <script>try {
  fetch(new Request("https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js", { method: 'HEAD', mode: 'no-cors' })).then(function(response) {
    return true;
  }).catch(function(e) {
    var carbonScript = document.createElement("script");
    carbonScript.src = "//cdn.carbonads.com/carbon.js?serve=CE7IC2QE&placement=wwwjavascripttutorialnet";
    carbonScript.id = "_carbonads_js";
    document.getElementById("carbon-block").appendChild(carbonScript);
  });
} catch (error) {
  console.log(error);
}</script></div></div></section><section id="nav_menu-10" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">New ES6 Syntax</h4><div class="menu-es6-new-syntax-container"><ul id="menu-es6-new-syntax" class="menu"><li id="menu-item-769" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-769"><a title="JavaScript let" href="https://www.javascripttutorial.net/es6/javascript-let/">JavaScript let</a></li><li id="menu-item-84751" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84751"><a title="Differences Between var and let" href="https://www.javascripttutorial.net/es6/difference-between-var-and-let/">var vs. let</a></li><li id="menu-item-770" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-770"><a title="JavaScript const" href="https://www.javascripttutorial.net/es6/javascript-const/">JavaScript const</a></li><li id="menu-item-771" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-771"><a title="JavaScript Template Literals" href="https://www.javascripttutorial.net/es6/javascript-template-literals/">Template Literals</a></li><li id="menu-item-772" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-772"><a title="Object Literal Syntax Extensions" href="https://www.javascripttutorial.net/es6/object-literal-extensions/">Object Literal Syntax Extensions</a></li><li id="menu-item-773" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-773"><a title="JavaScript Default Parameters" href="https://www.javascripttutorial.net/es6/javascript-default-parameters/">Default Parameters</a></li><li id="menu-item-774" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-774"><a title="JavaScript Rest Parameters" href="https://www.javascripttutorial.net/es6/javascript-rest-parameters/">Rest Parameters</a></li><li id="menu-item-775" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-775"><a title="JavaScript Spread Operator" href="https://www.javascripttutorial.net/es6/javascript-spread/">Spread Operator</a></li><li id="menu-item-776" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-776"><a title="JavaScript Destructuring" href="https://www.javascripttutorial.net/es6/destructuring/">Destructuring</a></li><li id="menu-item-777" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-777"><a title="JavaScript for…of Loop" href="https://www.javascripttutorial.net/es6/javascript-for-of/">for…of Loop</a></li><li id="menu-item-84759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84759"><a title="A Quick Look at Octal and Binary Literals in ES6" href="https://www.javascripttutorial.net/es6/octal-and-binary-literals/">Octal and Binary Literals</a></li></ul></div></div></section><section id="nav_menu-11" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">ES6 Module &#038; Class</h4><div class="menu-es6-module-class-container"><ul id="menu-es6-module-class" class="menu"><li id="menu-item-84749" class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-1007 current_page_item menu-item-84749"><a title="A Comprehensive Look at ES6 Modules" href="https://www.javascripttutorial.net/es6/es6-modules/" aria-current="page">Modules</a></li><li id="menu-item-778" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-778"><a title="JavaScript Class Fundamentals" href="https://www.javascripttutorial.net/es6/javascript-class/">Class Fundamentals</a></li><li id="menu-item-779" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-779"><a title="JavaScript Inheritance" href="https://www.javascripttutorial.net/es6/javascript-inheritance/">Inheritance</a></li><li id="menu-item-780" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-780"><a title="JavaScript new.target Metaproperty" href="https://www.javascripttutorial.net/es6/javascript-new-target/">new.target</a></li></ul></div></div></section><section id="textblockswidget-3" class="widget widget_textblockswidget"><div class="widget-wrap"><div class="text-block sidebar-middle"><div class="ad"><div data-type="ad" data-publisher="javascripttutorial.net" data-format="300x250" data-zone="sidebar_middle"></div></div></div></div></section><section id="nav_menu-22" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">ES6 Arrow Functions</h4><div class="menu-es6-arrow-functions-container"><ul id="menu-es6-arrow-functions" class="menu"><li id="menu-item-86536" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-86536"><a title="An Introduction to JavaScript Arrow Functions" href="https://www.javascripttutorial.net/es6/javascript-arrow-function/">Arrow Functions</a></li><li id="menu-item-86535" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-86535"><a title="When you should not use the arrow functions" href="https://www.javascripttutorial.net/es6/when-you-should-not-use-arrow-functions/">When Not To Use Arrow Functions</a></li></ul></div></div></section><section id="nav_menu-16" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Iterators &#038; Generators</h4><div class="menu-es6-iterators-generators-container"><ul id="menu-es6-iterators-generators" class="menu"><li id="menu-item-84777" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84777"><a title="JavaScript Iterators" href="https://www.javascripttutorial.net/es6/javascript-iterator/">Iterators</a></li><li id="menu-item-84776" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84776"><a title="JavaScript Generators" href="https://www.javascripttutorial.net/es6/javascript-generators/">Generators</a></li><li id="menu-item-84824" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84824"><a title="JavaScript yield Keyword" href="https://www.javascripttutorial.net/es6/javascript-yield/">yield Keyword</a></li></ul></div></div></section><section id="nav_menu-17" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Promises</h4><div class="menu-es6-promises-container"><ul id="menu-es6-promises" class="menu"><li id="menu-item-84778" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84778"><a title="JavaScript Promises" href="https://www.javascripttutorial.net/es6/javascript-promises/">Promises</a></li><li id="menu-item-85916" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85916"><a title="Promise Chaining" href="https://www.javascripttutorial.net/es6/promise-chaining/">Promise Chaining</a></li><li id="menu-item-85939" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85939"><a title="JavaScript Promise.all()" href="https://www.javascripttutorial.net/es6/javascript-promise-all/">Promise.all()</a></li><li id="menu-item-85938" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85938"><a title="JavaScript Promise.race()" href="https://www.javascripttutorial.net/es6/javascript-promise-race/">Promise.race()</a></li><li id="menu-item-85915" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-85915"><a title="Promise Error Handling" href="https://www.javascripttutorial.net/es6/promise-error-handling/">Promise Error Handling</a></li></ul></div></div></section><section id="nav_menu-12" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">ES6 Collections</h4><div class="menu-es6-collection-container"><ul id="menu-es6-collection" class="menu"><li id="menu-item-751" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-751"><a title="JavaScript Set" href="https://www.javascripttutorial.net/es6/javascript-set/">Set</a></li><li id="menu-item-752" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-752"><a title="Essential Guide to JavaScript Map" href="https://www.javascripttutorial.net/es6/javascript-map/">Map</a></li></ul></div></div></section><section id="nav_menu-18" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Array Extensions</h4><div class="menu-es6-array-extensions-container"><ul id="menu-es6-array-extensions" class="menu"><li id="menu-item-84855" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84855"><a title="JavaScript Array.of() Method" href="https://www.javascripttutorial.net/es6/javascript-array-of/">Array.of()</a></li><li id="menu-item-84854" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84854"><a title="JavaScript Array from() method" href="https://www.javascripttutorial.net/es6/javascript-array-from/">Array.from()</a></li><li id="menu-item-84875" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84875"><a title="JavaScript Array find() Method" href="https://www.javascripttutorial.net/es6/javascript-array-find/">Array find()</a></li><li id="menu-item-84874" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84874"><a title="Array findIndex()" href="https://www.javascripttutorial.net/es6/javascript-array-findindex/">Array findIndex()</a></li></ul></div></div></section><section id="nav_menu-20" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Object Extensions</h4><div class="menu-es6-object-extensions-container"><ul id="menu-es6-object-extensions" class="menu"><li id="menu-item-84937" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84937"><a title="JavaScript Object.assign()" href="https://www.javascripttutorial.net/es6/javascript-object-assign/">Object.assign()</a></li><li id="menu-item-84936" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84936"><a title="JavaScript Object.is()" href="https://www.javascripttutorial.net/es6/javascript-object-is/">Object.is()</a></li></ul></div></div></section><section id="nav_menu-21" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">String Extensions</h4><div class="menu-es6-string-extensions-container"><ul id="menu-es6-string-extensions" class="menu"><li id="menu-item-84949" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84949"><a title="JavaScript String startsWith" href="https://www.javascripttutorial.net/es6/javascript-string-startswith/">String startsWith()</a></li><li id="menu-item-84948" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84948"><a title="JavaScript String endsWith" href="https://www.javascripttutorial.net/es6/javascript-string-endswith/">String endsWith()</a></li><li id="menu-item-84953" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84953"><a title="JavaScript String includes()" href="https://www.javascripttutorial.net/es6/javascript-string-includes/">String includes()</a></li></ul></div></div></section><section id="nav_menu-19" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Proxy &#038; Reflection</h4><div class="menu-es6-proxy-reflection-container"><ul id="menu-es6-proxy-reflection" class="menu"><li id="menu-item-84857" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84857"><a title="JavaScript Proxy" href="https://www.javascripttutorial.net/es6/javascript-proxy/">Proxy</a></li><li id="menu-item-84856" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-84856"><a title="JavaScript Reflection" href="https://www.javascripttutorial.net/es6/javascript-reflection/">Reflection</a></li></ul></div></div></section><section id="textblockswidget-4" class="widget widget_textblockswidget"><div class="widget-wrap"><div class="text-block sidebar-bottom"><div class="ad"><div data-type="ad" data-publisher="javascripttutorial.net" data-format="300x250" data-zone="sidebar_bottom"></div></div></div></div></section></aside></div></div></div><div class="footer-widgets"><div class="wrap"><div class="widget-area footer-widgets-1 footer-widget-area"><section id="text-2" class="widget widget_text"><div class="widget-wrap"><h4 class="widget-title widgettitle">About JavaScript Tutorial</h4><div class="textwidget">The JavaScript Tutorial website helps you learn JavaScript programming from scratch quickly and effectively.</div></div></section></div><div class="widget-area footer-widgets-2 footer-widget-area"><section id="recently_created_pages-2" class="widget Recently_Created_Pages"><div class="widget-wrap"><h4 class="widget-title widgettitle">Recent Tutorials</h4><ul><li class='page_item page-item-87351'><a href='https://www.javascripttutorial.net/nodejs-tutorial/npm-publish/' title='Npm Publish'>Npm Publish</a></li><li class='page_item page-item-87344'><a href='https://www.javascripttutorial.net/nodejs-tutorial/npm-uninstall/' title='Npm Uninstall'>Npm Uninstall</a></li><li class='page_item page-item-87340'><a href='https://www.javascripttutorial.net/nodejs-tutorial/npm-view/' title='Npm View'>Npm View</a></li><li class='page_item page-item-87329'><a href='https://www.javascripttutorial.net/nodejs-tutorial/npm-list/' title='Npm List'>Npm List</a></li><li class='page_item page-item-87319'><a href='https://www.javascripttutorial.net/nodejs-tutorial/npm-semantic-versioning/' title='Npm Semantic Versioning'>Npm Semantic Versioning</a></li></ul></div></section></div><div class="widget-area footer-widgets-3 footer-widget-area"><section id="nav_menu-2" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Site Links</h4><div class="menu-footer-container"><ul id="menu-footer" class="menu"><li id="menu-item-30" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-30"><a title="Want to know more about us?" href="https://www.javascripttutorial.net/about/">About Us</a></li><li id="menu-item-29" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-29"><a title="Do you have any suggestions or feedback? Just contact us" href="https://www.javascripttutorial.net/contact/">Contact Us</a></li><li id="menu-item-28" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-28"><a title="Privacy Policy" href="https://www.javascripttutorial.net/privacy-policy/">Privacy Policy</a></li></ul></div></div></section></div></div></div><footer class="site-footer"><div class="wrap"><div class="creds"><p>Copyright &#x000A9;&nbsp;2020 by JavaScript Tutorial Website. All Right Reserved.</div></div></footer></div><script type='text/javascript'>function _dmBootstrap(file) {
    var _dma = document.createElement('script');
    _dma.type = 'text/javascript';
    _dma.async = true;
    _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
}
function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
(function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();</script><noscript><style>.lazyload{display:none;}</style></noscript><script data-noptimize="1">window.lazySizesConfig=window.lazySizesConfig||{};window.lazySizesConfig.loadMode=1;</script><script async data-noptimize="1" src='https://cdn.javascripttutorial.net//wp-content/plugins/autoptimize/classes/external/js/lazysizes.min.js?ao_version=2.7.3'></script> <script type='text/javascript'>var wth_js_lang = {"ajax_url":"https:\/\/www.javascripttutorial.net\/wp-admin\/admin-ajax.php","nonce":"b0846a824b","confirm":"Are you sure to delete item?","positive_feedback":null,"positive_feedback_option":"feedback_messege","positive_feedback_required":null,"negative_feedback":"true","negative_feedback_required":"true","wth_title_nothank":"What was wrong? Please help us to improve","wth_title_yesthank":"Well Done! Please leave your positive feedback.","wth_thank_you":"Thank You for your feedback!","submit_text":"Submit","wth_ga_enable":"","wth_ga_category":"Was This Helpful?","wth_ga_positive":"Positive Reviews","wth_ga_negative":"Negative Reviews","wth_share_ask":"Awesome, share it:","wth_fb_share":"Share","wth_twitter_share":"Tweet"};</script> <script defer src="https://cdn.javascripttutorial.net/wp-content/cache/autoptimize/js/autoptimize_8e629f2ae4d14517d0dd9cc7feb43e91.js"></script></body></html>